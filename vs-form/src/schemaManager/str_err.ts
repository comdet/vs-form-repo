export enum ErrorCode {
  // ISchema errors
  rootnotContainer = 'rootnotContainer',
  rootChildrenEmpty = 'rootChildrenEmpty',
  errParseString = 'errParseString',
  schemaNotFound = 'schemaNotFound',
  subSchemaNotFound = 'subSchemaNotFound',
  subSchemaKeyInvalid = 'subSchemaKeyInvalid',
  componentsnotdefined = 'componentsnotdefined',
  valuesnotdefined = 'valuesnotdefined',
  namePropMissing = 'namePropMissing',
  duplicateFields = 'duplicateFields',
  duplicateFieldPaths = 'duplicateFieldPaths',
  duplicateIds = 'duplicateIds',
  fieldsHasNoParent = 'fieldsHasNoParent',
  fieldhasDuplicatesInChildren = 'fieldhasDuplicatesInChildren',
  valuesKeyHasNoField = 'valuesKeyHasNoField',
  onlyFormTagForRootComp = 'onlyFormTagForRootComp',
  recursiveChildren = 'recursiveChildren',
  possibleRecursion = 'possibleRecursion',
  // IComponent errors
  hasnotype = 'hasnotype',
  invalidtype = 'invalidtype',
  invalidComponentType = 'invalidComponentType',
  hasNoComponentType = 'hasNoComponentType',
  requiredPropMissing = 'requiredPropMissing',
  wrongPropertyType = 'wrongPropertyType',
  wrongPropertyTypeInArray = 'wrongPropertyTypeInArray',
  arrayIsEmpty = 'arrayIsEmpty',
  noChildrenKeys = 'noChildrenKeys',
  invalidChildrenKeys = 'invalidChildrenKeys',
  invalidTabsKeys = 'invalidTabsKeys',
  invalidColumns = 'invalidColumns',
  notDataFieldColumns = 'notDataFieldColumns',
  valueNotInEnum = 'valueNotInEnum',
  valueSmallerThanMin = 'valueSmallerThanMin',
  valueGreaterThanMax = 'valueGreaterThanMax',
  valueNotInMinMax = 'valueNotInMinMax',
  fieldNotInValues = 'fieldNotInValues',
  wrongDataTypeInValues = 'wrongDataTypeInValues',
  hasInvalidProp = 'hasInvalidProp',
  wrongDataType = 'wrongDataType',
  wrongDataTypeDefaultValue = 'wrongDataTypeDefaultValue',
  selectItemsMustBeObjects = 'selectItemsMustBeObjects',
  selectItemsMustHaveValueAndText = 'selectItemsMustHaveValueAndText',
  selectItemsMustHaveCorrectDataType = 'selectItemsMustHaveCorrectDataType',
  selectItemsUnique = 'selectItemsUnique',
  selectItemsTextMusBeString = 'selectItemsTextMusBeString',
  selectItemsTextOnlyOneEmpty = 'selectItemsTextOnlyOneEmpty',
  selectItemsTextNotUnique = 'selectItemsTextNotUnique',
  typeStringOrArray = 'typeStringOrArray',
  compNotFound = 'compNotFound',
  invalidPrefixType = 'invalidPrefixType',
  invalidIconType = 'invalidIconType',
  maskOnlyInMaskInputComponent = 'maskOnlyInMaskInputComponent',
  // maskOnlyInInputTextComponent = 'maskOnlyInInputTextComponent',
  maskNotMultilineInput = 'maskNotMultilineInput',
  maskArrayOrFunction = 'maskArrayOrFunction',
  maskArrayItemsStringOrRegExp = 'maskArrayItemsStringOrRegExp',
  stringOrFunction = 'stringOrFunction',
  styleMustBeObject = 'styleMustBeObject',
  styleAttrNotObject = 'styleAttrNotObject',
  speedDialActionObject = 'speedDialActionObject',
  iconOrSvg = 'iconOrSvg',
}

type IErrorStrings = {
  [key in ErrorCode]: string
}

// tslint:disable-next-line:variable-name
export const ErrorStrings: IErrorStrings = {
  // ISchema errors
  rootnotContainer: 'Root component type must be a container',
  rootChildrenEmpty: 'the children array may not be empty',
  errParseString: 'String parsing error',
  schemaNotFound: 'ISchema not found in List',
  subSchemaNotFound: 'Sub-Schema not found',
  subSchemaKeyInvalid : 'The keyField is not a valid field.',
  componentsnotdefined: 'components not defined!',
  valuesnotdefined: 'values not defined!',
  namePropMissing: 'schema has no name property',
  duplicateFields: 'duplicate fields are present',
  duplicateFieldPaths: 'duplicate Field Paths are present',
  duplicateIds: 'duplicate Ids are present',
  fieldsHasNoParent: 'field has no parent (not in any children)',
  fieldhasDuplicatesInChildren: 'field is in several parents',
  valuesKeyHasNoField: 'For the following value key(s) the component is missing:',
  onlyFormTagForRootComp: 'Form component is only allowed for the root component',
  recursiveChildren: 'Possible Recursion with children in containers',
  possibleRecursion: 'Possible Recursion : More than 100 Sub-Schemas found',
  // IComponent errors
  hasnotype: 'has no type',
  invalidtype: 'has invalid type',
  requiredPropMissing: 'required Property missing',
  wrongPropertyType: 'property has wrong type',
  wrongPropertyTypeInArray: 'Items in the array has the wrong type',
  arrayIsEmpty: 'array should not be empty',
  noChildrenKeys: 'Container has no children',
  invalidChildrenKeys: 'Container contains invalid keys',
  invalidTabsKeys:  'Only tabs-Component are allowed',
  invalidColumns: 'Data Table has invalid columns',
  notDataFieldColumns: 'The columns of the Data Table must be data fields',
  valueNotInEnum: 'value is not in the list of allowed values',
  valueSmallerThanMin: 'value is smaller than minimum',
  valueGreaterThanMax: 'value is greater than maximum',
  valueNotInMinMax: 'value is not between min and max',
  fieldNotInValues: 'field not present in schema.values',
  wrongDataTypeInValues: 'field has wrong Value Type in schema.values',
  hasInvalidProp: 'invalid (unnecessary) property',
  wrongDataType: 'the value has a wrong data-type',
  wrongDataTypeDefaultValue: 'the default value has the wrong data-type',
  invalidComponentType: 'IComponent has an invalid type',
  hasNoComponentType: 'Component has no type',
  selectItemsMustBeObjects: 'Items in select must objects',
  selectItemsMustHaveValueAndText: 'All Items in select must have a text and a value property',
  selectItemsMustHaveCorrectDataType: 'All Item-Values must have the type defined in the datatype',
  selectItemsUnique: 'All Item-Values must be unique',
  selectItemsTextMusBeString: 'All Item-Texts must be string',
  selectItemsTextOnlyOneEmpty: 'Only one Item should have empty string',
  selectItemsTextNotUnique: 'Text in items are not unique',
  typeStringOrArray: 'property must be either string or array of strings',
  compNotFound: 'Prefix/Suffix: Component not found',
  invalidPrefixType: 'Prefix/Suffix-Components must be either text, button or iconbutton',
  invalidIconType: 'Icon-Component is not an icon',
  maskOnlyInMaskInputComponent: 'mask can only be defined in the input component',
  // maskOnlyInInputTextComponent: 'mask can only be defined in input component with inputType = "text"',
  maskNotMultilineInput: 'masks cannot be applied to multiline inputs',
  maskArrayOrFunction: 'mask must be either an array or a function',
  maskArrayItemsStringOrRegExp: 'each item in the mask array mmust be either a string or a regexp',
  stringOrFunction: 'property must be either string or a function',
  styleMustBeObject: 'Style must be an object',
  styleAttrNotObject: 'Style attribute should not be an object',
  speedDialActionObject: 'Each Speed Dial Action must be an object',
  iconOrSvg: 'Icon or svg property must be provided for Icon-Component' ,
}
